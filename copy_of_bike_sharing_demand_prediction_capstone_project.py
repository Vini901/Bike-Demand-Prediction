# -*- coding: utf-8 -*-
"""Copy of Bike Sharing Demand Prediction - Capstone Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZuDX74x3PdIsQ4dcxShOF1HYPb1_zhZO

# <b><u> Project Title : Seoul Bike Sharing Demand Prediction </u></b>

## <b> Problem Description </b>

### Currently Rental bikes are introduced in many urban cities for the enhancement of mobility comfort. It is important to make the rental bike available and accessible to the public at the right time as it lessens the waiting time. Eventually, providing the city with a stable supply of rental bikes becomes a major concern. The crucial part is the prediction of bike count required at each hour for the stable supply of rental bikes.

## <b> Data Description </b>

### <b> The dataset contains weather information (Temperature, Humidity, Windspeed, Visibility, Dewpoint, Solar radiation, Snowfall, Rainfall), the number of bikes rented per hour and date information.</b>


### <b>Attribute Information: </b>

* ### Date : year-month-day
* ### Rented Bike count - Count of bikes rented at each hour
* ### Hour - Hour of he day
* ### Temperature-Temperature in Celsius
* ### Humidity - %
* ### Windspeed - m/s
* ### Visibility - 10m
* ### Dew point temperature - Celsius
* ### Solar radiation - MJ/m2
* ### Rainfall - mm
* ### Snowfall - cm
* ### Seasons - Winter, Spring, Summer, Autumn
* ### Holiday - Holiday/No holiday
* ### Functional Day - NoFunc(Non Functional Hours), Fun(Functional hours)
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv('/content/drive/MyDrive/Copy of SeoulBikeData.csv',encoding='latin')

data.head()

data['Hour']=data['Hour'].astype('category')

print('The Number of rows = '+str(data.shape[0]))
print('The Number of columns = '+str(data.shape[1]))

data.isna().sum()

#missing value counts in each of these columns
miss = data.isnull().sum()/len(data)
miss = miss[miss > 0]
miss.sort_values(inplace=True)
miss

sns.countplot(data['Holiday'])

sns.countplot(data['Seasons'])

sns.distplot(data['Rented Bike Count'])

print(data['Rented Bike Count'].skew())

sns.distplot(np.sqrt(data['Rented Bike Count']))

print(np.sqrt(data['Rented Bike Count']).skew())

data['mod Rented Bike Count']=np.sqrt(data['Rented Bike Count'])

data[data['Rented Bike Count']==2047]

data[data['Rented Bike Count']==3556]

data[data['Rented Bike Count']==504]

data.describe(include='all')

data.describe(include='all')

sns.distplot(data['Hour'])

data.info()

new_count=data.groupby(['Date'],as_index=False).agg({'Rented Bike Count':sum})
new_count.shape

duplicate = data[data.duplicated()] 
  
print("Duplicate Rows :")

data['Date'].loc[0][-4:]

data['year']=data.Date.apply(lambda x:x[-4:])

data['year'].value_counts()

data.sort_values(by='Date')

data['Visibility (10m)'].value_counts()

data[data['Snowfall (cm)']==8.8]

sns.scatterplot(x=data['Rainfall(mm)'],y=data['mod Rented Bike Count'])

sns.scatterplot(x=data['Snowfall (cm)'],y=data['mod Rented Bike Count'])

sns.scatterplot(x=data['Solar Radiation (MJ/m2)'],y=data['mod Rented Bike Count'])

sns.distplot(np.cbrt(data['Solar Radiation (MJ/m2)']))

sns.scatterplot(x=data['Dew point temperature(°C)'],y=data['mod Rented Bike Count'])

sns.distplot(np.cbrt(data['Dew point temperature(°C)']))

plt.rcParams['figure.figsize']=(10,6)
sns.heatmap(data.corr(),annot=True)

data.info()

sns.pairplot(data[['Temperature(°C)','Humidity(%)','Wind speed (m/s)','Visibility (10m)','Dew point temperature(°C)','Solar Radiation (MJ/m2)','Rainfall(mm)','Snowfall (cm)']],size=2)

def mod_hour(x):
  if x>=0 and x<6:
    return '1'
  elif x>=6 and x<12:
    return '2'
  elif x>=12 and x<18:
    return '3'
  elif x>=18 and x<24:
    return '4'

data.head()

data['Holiday']=data.Holiday.apply(lambda x : 0 if x=='No Holiday' else 1)

data['Holiday'].unique()

data.head()

sns.scatterplot(data['Temperature(°C)'],data['mod Rented Bike Count'])

"""0= No holiday
1=Holiday
"""

sns.boxenplot(data=data,x='Holiday',y='mod Rented Bike Count')

sns.boxenplot(data=data,x='Seasons',y='mod Rented Bike Count')

sns.boxenplot(data=data,x='Hour',y='mod Rented Bike Count')

sns.boxplot(data=data,x='Functioning Day',y='mod Rented Bike Count')

data.head()

data.drop(['Dew point temperature(°C)','Humidity(%)','Wind speed (m/s)','Visibility (10m)','Dew point temperature(°C)','Solar Radiation (MJ/m2)','Rainfall(mm)','Snowfall (cm)','year','Functioning Day'],axis=1,inplace=True)

data.head()

del data['Date']

y=data['mod Rented Bike Count']
x=data.drop('mod Rented Bike Count',axis=1)

x=pd.get_dummies(x)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression



x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
from sklearn.preprocessing import MinMaxScaler

# Transforming data
scaler = MinMaxScaler()
x_train = scaler.fit_transform(x_train)

x_test = scaler.transform(x_test)

Regress=LinearRegression()
Regress.fit(x_train,y_train)

Regress.coef_

Regress.intercept_

x_train.columns

Regress.score(x_train,y_train)

Regress.score(x_test,y_test)

from sklearn.model_selection import GridSearchCV

y_pre_train=Regress.predict(x_train)
y_pre_test=Regress.predict(x_test)

from sklearn.metrics import accuracy_score,r2_score,mean_squared_error,mean_absolute_error

r2_score(y_train,y_pre_train),r2_score(y_test,y_pre_test)

y_resi=y_train-y_pre_train

sns.scatterplot(y_train,y_resi)

sns.scatterplot(y_test,y_test-y_pre_test)

plt.figure(figsize=(8,5))
plt.plot((y_pre_test[:100]))
plt.plot(np.array((y_test[:100])))
plt.legend(["Predicted","Actual"])
plt.show()

plt.figure(figsize=(8,5))
plt.plot((y_pre_train[:100]))
plt.plot(np.array((y_train[:100])))
plt.legend(["Predicted","Actual"])
plt.show()

mean_squared_error(y_test, y_pre_test)

import math
math.sqrt(mean_squared_error(y_test, y_pre_test))

